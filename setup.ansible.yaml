---
- name: Does essential Tasks when setting up a server with debian
  hosts: all
  gather_facts: false

  pre_tasks:
    - name: Include from ./vars/main.yaml
      ansible.builtin.include_vars: ./vars/main.yaml

    - name: Update cache and upgrade system
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
        upgrade: safe

  tasks:

    - name: Install sudo
      ansible.builtin.apt:
        name: sudo
        state: present

    - name: Create new group called admind.
      ansible.builtin.group:
        name: "{{ group }}"
        state: present

    - name: Create a new user called admind and add him to groups admind and sudo.
      ansible.builtin.user:
        name: "{{ user }}" # change to desired username
        comment: System Administrator # change to desired full Name or remove Line
        password: "{{ passw }}" # imported from password.yaml - hashed password with mk passwd
        uid: 1030 # Set a UserID above 1000 because <1000 is for system Users
        groups:
          - "{{ group }}"
          - sudo
          - docker
        create_home: true
        shell: /bin/bash

    - name: Install packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - mc
        - htop
        - micro
        - unattended-upgrades
        - gnupg
    
    - name: 
      ansible.builtin.apt_key:
        url: "https://download.docker.com/linux/debian/gpg"
        state: present

    - name: Add repository into sources list
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ deb_architecture.stdout }}] https://download.docker.com/linux/debian stable"
        state: present
        filename: docker

    - name: Install packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: true
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-compose
        - docker-compose-plugin 

    - name: Create .ssh directory
      ansible.builtin.file:
        path: '/home/{{ user }}/.ssh/'
        state: directory
        owner: admind
        group: admind
        mode: '0755'

    - name: Create authorized_keys file
      ansible.builtin.file:
        path: '/home/{{ user }}/.ssh/authorized_keys'
        state: touch
        owner: "{{ user }}"
        group: "{{ group }}"
        mode: '0644'

    - name: Copy public-key into authorized_keys file
      ansible.builtin.lineinfile:
        path: '/home/{{ user }}/.ssh/authorized_keys'
        line: "{{ user_ssh_key }}" # replace with new public-key

    - name: Update SSH configuration
      ansible.builtin.lineinfile:
        dest: '/etc/ssh/sshd_config'
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
        validate: 'sshd -T -f %s'
        mode: '0644'
      with_items:
         - regexp: "^PasswordAuthentication"
           line: "PasswordAuthentication no"
         - regexp: "^PermitRootLogin"
           line: "PermitRootLogin no"
            #  - regexp: "^Port"
            #    line: "Port {{ ssh_port }}"
            #  - regexp: "^UseDNS"
            #    line: "UseDNS no"
         - regexp: "^PermitEmptyPasswords"
           line: "PermitEmptyPasswords no"
         - regexp: "^PubKeyAuthentication"
           line: "PubKeyAuthentication yes"
         - regexp: "^ChallengeResponseAuthentication"
           line: "ChallengeResponseAuthentication no"
            # - regexp: "^GSSAPIAuthentication"
            #  line: "GSSAPIAuthentication no"
            # - regexp: "^X11Forwarding"
            #   line: "X11Forwarding no"

    - name: Restart service httpd, in all cases
      ansible.builtin.service:
        name: 'sshd'
        state: restarted

